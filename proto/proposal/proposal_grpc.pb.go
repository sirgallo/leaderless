// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: proto/proposal.proto

package proposal

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Proposal_ProposalRPC_FullMethodName = "/lerpc.Proposal/ProposalRPC"
)

// ProposalClient is the client API for Proposal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProposalClient interface {
	ProposalRPC(ctx context.Context, in *ProposalRequest, opts ...grpc.CallOption) (*ProposalRequest, error)
}

type proposalClient struct {
	cc grpc.ClientConnInterface
}

func NewProposalClient(cc grpc.ClientConnInterface) ProposalClient {
	return &proposalClient{cc}
}

func (c *proposalClient) ProposalRPC(ctx context.Context, in *ProposalRequest, opts ...grpc.CallOption) (*ProposalRequest, error) {
	out := new(ProposalRequest)
	err := c.cc.Invoke(ctx, Proposal_ProposalRPC_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProposalServer is the server API for Proposal service.
// All implementations must embed UnimplementedProposalServer
// for forward compatibility
type ProposalServer interface {
	ProposalRPC(context.Context, *ProposalRequest) (*ProposalRequest, error)
	mustEmbedUnimplementedProposalServer()
}

// UnimplementedProposalServer must be embedded to have forward compatible implementations.
type UnimplementedProposalServer struct {
}

func (UnimplementedProposalServer) ProposalRPC(context.Context, *ProposalRequest) (*ProposalRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposalRPC not implemented")
}
func (UnimplementedProposalServer) mustEmbedUnimplementedProposalServer() {}

// UnsafeProposalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProposalServer will
// result in compilation errors.
type UnsafeProposalServer interface {
	mustEmbedUnimplementedProposalServer()
}

func RegisterProposalServer(s grpc.ServiceRegistrar, srv ProposalServer) {
	s.RegisterService(&Proposal_ServiceDesc, srv)
}

func _Proposal_ProposalRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProposalServer).ProposalRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Proposal_ProposalRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProposalServer).ProposalRPC(ctx, req.(*ProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Proposal_ServiceDesc is the grpc.ServiceDesc for Proposal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Proposal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lerpc.Proposal",
	HandlerType: (*ProposalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProposalRPC",
			Handler:    _Proposal_ProposalRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/proposal.proto",
}
