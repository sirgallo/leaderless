// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: proto/state.proto

package state

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProposalService_StateRPC_FullMethodName = "/lerpc.ProposalService/StateRPC"
)

// ProposalServiceClient is the client API for ProposalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProposalServiceClient interface {
	StateRPC(ctx context.Context, opts ...grpc.CallOption) (ProposalService_StateRPCClient, error)
}

type proposalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProposalServiceClient(cc grpc.ClientConnInterface) ProposalServiceClient {
	return &proposalServiceClient{cc}
}

func (c *proposalServiceClient) StateRPC(ctx context.Context, opts ...grpc.CallOption) (ProposalService_StateRPCClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProposalService_ServiceDesc.Streams[0], ProposalService_StateRPC_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &proposalServiceStateRPCClient{stream}
	return x, nil
}

type ProposalService_StateRPCClient interface {
	Send(*SwapState) error
	CloseAndRecv() (*SwapStateComplete, error)
	grpc.ClientStream
}

type proposalServiceStateRPCClient struct {
	grpc.ClientStream
}

func (x *proposalServiceStateRPCClient) Send(m *SwapState) error {
	return x.ClientStream.SendMsg(m)
}

func (x *proposalServiceStateRPCClient) CloseAndRecv() (*SwapStateComplete, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SwapStateComplete)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProposalServiceServer is the server API for ProposalService service.
// All implementations must embed UnimplementedProposalServiceServer
// for forward compatibility
type ProposalServiceServer interface {
	StateRPC(ProposalService_StateRPCServer) error
	mustEmbedUnimplementedProposalServiceServer()
}

// UnimplementedProposalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProposalServiceServer struct {
}

func (UnimplementedProposalServiceServer) StateRPC(ProposalService_StateRPCServer) error {
	return status.Errorf(codes.Unimplemented, "method StateRPC not implemented")
}
func (UnimplementedProposalServiceServer) mustEmbedUnimplementedProposalServiceServer() {}

// UnsafeProposalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProposalServiceServer will
// result in compilation errors.
type UnsafeProposalServiceServer interface {
	mustEmbedUnimplementedProposalServiceServer()
}

func RegisterProposalServiceServer(s grpc.ServiceRegistrar, srv ProposalServiceServer) {
	s.RegisterService(&ProposalService_ServiceDesc, srv)
}

func _ProposalService_StateRPC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProposalServiceServer).StateRPC(&proposalServiceStateRPCServer{stream})
}

type ProposalService_StateRPCServer interface {
	SendAndClose(*SwapStateComplete) error
	Recv() (*SwapState, error)
	grpc.ServerStream
}

type proposalServiceStateRPCServer struct {
	grpc.ServerStream
}

func (x *proposalServiceStateRPCServer) SendAndClose(m *SwapStateComplete) error {
	return x.ServerStream.SendMsg(m)
}

func (x *proposalServiceStateRPCServer) Recv() (*SwapState, error) {
	m := new(SwapState)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProposalService_ServiceDesc is the grpc.ServiceDesc for ProposalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProposalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lerpc.ProposalService",
	HandlerType: (*ProposalServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StateRPC",
			Handler:       _ProposalService_StateRPC_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/state.proto",
}
