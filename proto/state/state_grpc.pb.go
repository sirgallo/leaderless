// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: proto/state.proto

package state

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	State_StateRPC_FullMethodName = "/lerpc.State/StateRPC"
)

// StateClient is the client API for State service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StateClient interface {
	StateRPC(ctx context.Context, opts ...grpc.CallOption) (State_StateRPCClient, error)
}

type stateClient struct {
	cc grpc.ClientConnInterface
}

func NewStateClient(cc grpc.ClientConnInterface) StateClient {
	return &stateClient{cc}
}

func (c *stateClient) StateRPC(ctx context.Context, opts ...grpc.CallOption) (State_StateRPCClient, error) {
	stream, err := c.cc.NewStream(ctx, &State_ServiceDesc.Streams[0], State_StateRPC_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &stateStateRPCClient{stream}
	return x, nil
}

type State_StateRPCClient interface {
	Send(*SwapState) error
	CloseAndRecv() (*SwapStateComplete, error)
	grpc.ClientStream
}

type stateStateRPCClient struct {
	grpc.ClientStream
}

func (x *stateStateRPCClient) Send(m *SwapState) error {
	return x.ClientStream.SendMsg(m)
}

func (x *stateStateRPCClient) CloseAndRecv() (*SwapStateComplete, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SwapStateComplete)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StateServer is the server API for State service.
// All implementations must embed UnimplementedStateServer
// for forward compatibility
type StateServer interface {
	StateRPC(State_StateRPCServer) error
	mustEmbedUnimplementedStateServer()
}

// UnimplementedStateServer must be embedded to have forward compatible implementations.
type UnimplementedStateServer struct {
}

func (UnimplementedStateServer) StateRPC(State_StateRPCServer) error {
	return status.Errorf(codes.Unimplemented, "method StateRPC not implemented")
}
func (UnimplementedStateServer) mustEmbedUnimplementedStateServer() {}

// UnsafeStateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StateServer will
// result in compilation errors.
type UnsafeStateServer interface {
	mustEmbedUnimplementedStateServer()
}

func RegisterStateServer(s grpc.ServiceRegistrar, srv StateServer) {
	s.RegisterService(&State_ServiceDesc, srv)
}

func _State_StateRPC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StateServer).StateRPC(&stateStateRPCServer{stream})
}

type State_StateRPCServer interface {
	SendAndClose(*SwapStateComplete) error
	Recv() (*SwapState, error)
	grpc.ServerStream
}

type stateStateRPCServer struct {
	grpc.ServerStream
}

func (x *stateStateRPCServer) SendAndClose(m *SwapStateComplete) error {
	return x.ServerStream.SendMsg(m)
}

func (x *stateStateRPCServer) Recv() (*SwapState, error) {
	m := new(SwapState)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// State_ServiceDesc is the grpc.ServiceDesc for State service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var State_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lerpc.State",
	HandlerType: (*StateServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StateRPC",
			Handler:       _State_StateRPC_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/state.proto",
}
